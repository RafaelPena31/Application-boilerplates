{
  "React - Default component": {
    "prefix": "rn-dc",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, View } from 'react-native'",
      "",
      "export default function ${1:Component}() {",
      "\treturn (",
      "\t\t<View style={styles.container}>",
      "\t\t\t<View />",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "\tcontainer: {",
      "\t\tflex: 1",
      "\t}",
      "})",
      ""
    ],
    "description": "Create default `React Native Component`"
  },

  "React - Default component with Props": {
    "prefix": "rn-dc:props",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, View } from 'react-native'",
      "",
      "interface ${1:Component}Props {",
      "\t${2:prop}: ${3:propValue}",
      "}",
      "",
      "export default function ${1:Component}({ ${2:prop} }: ${1:Component}Props) {",
      "\treturn (",
      "\t\t<View style={styles.container}>",
      "\t\t\t<View />",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "\tcontainer: {",
      "\t\tflex: 1",
      "\t}",
      "})",
      ""
    ],
    "description": "Create default `React Native Component` with Props"
  },

  "React - Default screen": {
    "prefix": "rn-ds",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, View } from 'react-native'",
      "",
      "export default function ${1:Screen}() {",
      "\treturn (",
      "\t\t<View style={styles.container}>",
      "\t\t\t<View />",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "\tcontainer: {",
      "\t\tflex: 1",
      "\t}",
      "})",
      ""
    ],
    "description": "Create default `React Native Screen`"
  },

  "React - Default screen with RouteProps": {
    "prefix": "rn-ds:route",
    "body": [
      "import React from 'react'",
      "import { StyleSheet, View } from 'react-native'",
      "import { RouteProp } from '@react-navigation/native'",
      "import { StackNavigationProp } from '@react-navigation/stack'",
      "",
      "interface RouteParams {",
      "\t${1:prop}: ${2:propValue}",
      "}",
      "",
      "interface NavigationProps {",
      "\troute: RouteProp<Record<string, RouteParams>, 'RouteParam'>",
      "\tnavigation: StackNavigationProp<Record<string, any | undefined>, ''>",
      "}",
      "",
      "export default function ${3:Component}Screen({ route, navigation }: NavigationProps) {",
      "\tconst { ${1:prop} } = route.params",
      "\tconst { navigate } = navigation",
      "",
      "\treturn (",
      "\t\t<View style={styles.container}>",
      "\t\t\t<View />",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "\tcontainer: {",
      "\t\tflex: 1",
      "\t}",
      "})",
      ""
    ],
    "description": "Create default `React Native Screen` with RouteProps"
  },

  "React - Redux:Duck-Pattern": {
    "prefix": "r-rdx:duck",
    "body": [
      "import { Dispatch } from 'redux'",
      "import { ${1:MODULE_NAME}Type } from '../${1:MODULE_NAME}.types'",
      "",
      "export const SET_${2:UPPERCASE_MODULE_NAME} = 'SET_${2:UPPERCASE_MODULE_NAME}'",
      "",
      "interface Set${1:MODULE_NAME}Action {",
      "\ttype: typeof SET_${2:UPPERCASE_MODULE_NAME}",
      "\tpayload: ${1:MODULE_NAME}Type",
      "}",
      "",
      "export interface ${1:MODULE_NAME}TypeState {",
      "\t${3:CAMELCASE_MODULE_NAME}Data: ${1:MODULE_NAME}Type | null",
      "}",
      "",
      "export type ${1:MODULE_NAME}TypeActions = Set${1:MODULE_NAME}Action",
      "",
      "export const ${3:CAMELCASE_MODULE_NAME}State: ${1:MODULE_NAME}TypeState = {",
      "\t${3:CAMELCASE_MODULE_NAME}Data: null",
      "}",
      "",
      "export const ${1:MODULE_NAME}Reducer = (state = ${3:CAMELCASE_MODULE_NAME}State, action: ${1:MODULE_NAME}TypeActions) => {",
      "\tswitch (action.type) {",
      "\t\tcase SET_${2:UPPERCASE_MODULE_NAME}:",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t${3:CAMELCASE_MODULE_NAME}Data: action.payload",
      "\t\t\t}",
      "\t\tdefault:",
      "\t\t\treturn state",
      "\t}",
      "}",
      "",
      "export const Set${1:MODULE_NAME} = (state: ${1:MODULE_NAME}Type) => async (dispatch: Dispatch<${1:MODULE_NAME}TypeActions>) => {",
      "\tdispatch({ type: SET_${2:UPPERCASE_MODULE_NAME}, payload: state })",
      "}",
      ""
    ]
  }
}
